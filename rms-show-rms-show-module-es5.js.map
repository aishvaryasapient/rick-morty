{"version":3,"sources":["webpack:///src/app/rms-show/rms-detail/rms-detail.component.ts","webpack:///src/app/rms-show/rms-detail/rms-detail.component.html","webpack:///src/app/rms-show/rms-list/rms-list.component.ts","webpack:///src/app/rms-show/rms-list/rms-list.component.html","webpack:///src/app/rms-show/rms-show-routing.module.ts","webpack:///src/app/rms-show/rms-show.module.ts","webpack:///src/app/rms-show/rms-show.service.ts"],"names":["RmsDetailComponent","selector","templateUrl","styleUrls","id","RmsListComponent","_rmsService","page","count","currentpage","pages","perPage","selectedFilter","filterList","getAllFilterList","getAllCharacters","query","length","forEach","item","name","toLowerCase","searchName","getAllChjaracters","subscribe","res","info","allCharacters","results","err","console","log","evt","index","findIndex","sFilter","push","mainCat","find","subItem","items","sItem","selected","splice","val","sortOrder","filterChange","goToPage","routes","path","component","RmsShowRoutingModule","forChild","imports","exports","RmsShowModule","declarations","RmsShowService","_http","url","filter","queryString","get","pipe","handleError","error","errorMessage","ErrorEvent","message","status","providedIn"],"mappings":"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","file":"rms-show-rms-show-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'rms-rms-detail',\n  templateUrl: './rms-detail.component.html',\n  styleUrls: ['./rms-detail.component.scss']\n})\nexport class RmsDetailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>rms-detail works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { RmsShowService } from '../rms-show.service';\nimport {Page, Character, FILTER} from './../models/models';\nimport { CHIPMODEL } from 'src/app/shared/model/chip.model';\n\n@Component({\n  selector: 'rms-rms-list',\n  templateUrl: './rms-list.component.html',\n  styleUrls: ['./rms-list.component.scss']\n})\nexport class RmsListComponent implements OnInit {\n  searchName: string;\n  sortOrder: boolean;\n  page:Page = {\n    count:0,\n    currentpage:1,\n    pages:0,\n    perPage:20\n  };\n  allCharacters: any[];\n  filterList:FILTER[];\n  selectedFilter: CHIPMODEL[]=[];\n  constructor(private _rmsService: RmsShowService) { }\n\n  ngOnInit(): void {\n    this.filterList = this._rmsService.getAllFilterList();\n    this.getAllCharacters(1)\n  }\n\n  getAllCharacters(page:number){\n    let query = '';\n    if(this.selectedFilter.length > 0){\n      this.selectedFilter.forEach(item=>{\n        query +='&' +item.name.name.toLowerCase() +'='+item.item.name \n      })\n    }\n    if(this.searchName){\n      query += '&name='+this.searchName\n    }\n    this._rmsService.getAllChjaracters(page,query).subscribe(\n      (res:{info:any,results:Character[]})=>{\n        this.page.count = res.info.count;\n        this.page.pages = res.info.pages;\n        this.allCharacters = res.results;\n      },\n      err=>{\n        console.log(err);\n      }\n    )\n  }\n  filterChange(evt){\n    console.log(evt);\n    let index = this.selectedFilter.findIndex(sFilter=> sFilter.item === evt.item);\n    if(index === -1){\n      this.selectedFilter.push(evt);\n    }else{\n     let mainCat =  this.filterList.find(item=> item.name === this.selectedFilter[index].name.name);\n     let subItem = mainCat.items.find(sItem=> sItem.name === this.selectedFilter[index].item.name);\n     subItem.selected = false;\n      this.selectedFilter.splice(index,1);\n    }\n    this.getAllCharacters(this.page.currentpage);\n  }\n\n  goToPage(evt){\n    this.page.currentpage = evt;\n    this.getAllCharacters(this.page.currentpage);\n  }\n\n  sortingOnChange(val){\n    this.sortOrder = val;\n    this.allCharacters = [...this.allCharacters]\n  }\n}\n","\n\n\n\n<div fxLayout=\"row\" fxLayout.xs=\"column\" fxFlex fxLayoutGap=\"20px\">\n    <div fxLayout=\"column\" fxFlex=\"18\" fxFlexOffset=\"20px\" class=\"p-fixed\" >\n        <h3>Filter</h3>\n        <rms-filter [filterList]=\"filterList\" (filterChange)=\"filterChange($event)\"></rms-filter>\n    </div>\n    <div fxLayout=\"column\" fxFlex=\"80\">\n        <div fxLayout=\"column\">\n            <div fxLayout=\"row wrap\">\n                <h3 fxFlex=\"100\">Selected Filters</h3>\n                <ng-container *ngIf=\"selectedFilter.length > 0\">\n                    <rms-chips *ngFor=\"let item of selectedFilter\" [chipsInput]=\"item\" (removeFilter)=\"filterChange($event)\"></rms-chips>\n                </ng-container>\n            </div>\n            <div fxLayoutAlign=\"space-between center\" class=\"search-sort\">\n                \n               <div class=\"search\">\n                   <label for=\"search\">Search By Name</label>\n                    <input type=\"text\" id=\"search\" placeholder=\"\" [(ngModel)]=\"searchName\">\n                    <button color=\"primary\" (click)=\"getAllCharacters(page.currentpage)\">Search</button>\n               </div>\n               <div class=\"sort\">\n                <select (change)=\"sortOrder = $event.target.value\" #sortVar>\n                    <option value=\"false\">Ascending</option>\n                    <option value=\"true\">Descending</option>\n                  </select>\n               </div>\n            </div>\n        </div>\n        <div fxLayout=\"row wrap\" class=\"cards\" fxFlex>\n            <div fxFlex=\"24\" fxFlex.xs=\"47\" class=\"card\" *ngFor=\"let char of allCharacters | sort:'id': sortOrder\">\n               <!-- <p>{{char.name}}</p> -->\n               <div class=\"card-header\">\n                   <div class=\"card-image\">\n                       <img [src]=\"char.image\" alt=\"{{char.image}}\">\n                   </div>\n                   <div class=\"card-title\">\n                       <h2>{{char.name}}</h2>\n                       <p>id: {{char.id}} - {{ char.created| elaspedTime}}</p>\n                   </div>\n               </div>\n               <div class=\"card-info\">\n                    <div class=\"list-item\">\n                        <span>STATUS</span>\n                        <p>{{char.status}}</p>\n                    </div>\n                    <div class=\"list-item\">\n                        <span>SPECIES</span>\n                        <p>{{char.species}}</p>\n                    </div>\n                    <div class=\"list-item\">\n                        <span>GENDER</span>\n                        <p>{{char.gender}}</p>\n                    </div>\n                    <div class=\"list-item\">\n                        <span>ORIGIN</span>\n                        <p>{{char.origin.name}}</p>\n                    </div>\n                    <div class=\"list-item\">\n                        <span>LAST LOCATION</span>\n                        <p>{{char.location.name}}</p>\n                    </div>\n               </div>\n            </div>\n                <!-- <mat-card *ngFor=\"let char of allCharacters\" fxFlex=\"24\" fxFlex.xs=\"48\" fxFlex.sm=\"31\">\n                        <img mat-card-image [src]=\"char.image\" alt=\"{{char.image}}\">\n                        <div class=\"title-custom\">\n                            <span>{{char.name}}/{{char.episode.length}}</span>\n                        </div>\n                    <mat-card-content>\n                    <mat-list>\n                        <mat-list-item>\n                            <span>STATUS</span>\n                            <span class=\"spacer\"></span>\n                            <span>{{char.status}}</span>\n                        </mat-list-item>\n                        <mat-list-item>\n                            <span>SPECIES</span>\n                            <span class=\"spacer\"></span>\n                            <span>{{char.species}}</span>\n                        </mat-list-item>\n                        <mat-list-item>\n                            <span>GENDER</span>\n                            <span class=\"spacer\"></span>\n                            <span>{{char.gender}}</span>\n                        </mat-list-item>\n                        <mat-list-item>\n                            <span>ORIGIN</span>\n                            <span class=\"spacer\"></span>\n                            <span>{{char.origin.name}}</span>\n                        </mat-list-item>\n                        <mat-list-item>\n                            <span>LAST LOCATION</span>\n                            <span class=\"spacer\"></span>\n                            <span>{{char.location.name}}</span>\n                        </mat-list-item>\n                      </mat-list>\n                </mat-card-content>        \n            </mat-card> -->\n        </div>\n        <div fxLayoutAlign=\"end\">\n            <rms-pagination [currentPage]=\"page.currentpage\" [totalItemsCount]=\"page.count\" [perPage]=\"page.perPage\" [pagesToShow]=\"page.pages > 4 ? 4: page.pages\"\n             (prev)=\"goToPage($event)\" (next)=\"goToPage($event)\" (goPage)=\"goToPage($event)\"></rms-pagination>\n        </div>\n    </div>\n    \n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RmsListComponent } from './rms-list/rms-list.component';\nimport { RmsDetailComponent } from './rms-detail/rms-detail.component';\n\n\nconst routes: Routes = [\n  {\n    path:'',\n    component: RmsListComponent\n  },\n  {\n    path:':id',\n    component: RmsDetailComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RmsShowRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RmsShowRoutingModule } from './rms-show-routing.module';\nimport { RmsListComponent } from './rms-list/rms-list.component';\nimport { RmsDetailComponent } from './rms-detail/rms-detail.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [RmsListComponent, RmsDetailComponent],\n  imports: [\n    CommonModule,\n    RmsShowRoutingModule,\n    SharedModule\n  ]\n})\nexport class RmsShowModule { }\n","import { Injectable } from '@angular/core';\nimport {environment} from './../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport {retry, catchError} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RmsShowService {\n\n  constructor(private _http: HttpClient) { \n    console.log(environment.url)\n  }\n\n  getAllFilterList(){\n    let filter = [\n      {\n        name: 'Species',\n        items:[{name:'Human',selected:false}, {name:'Mytholog',selected:false},{name:'Other Species',selected:false}]\n      },\n      {\n        name:'Gender',\n        items:[{name:'Male',selected:false},{name:'Female',selected:false}]\n      },\n      {\n        name: 'Origin',\n        items:[{name:'Unknown',selected:false},{name:'Post Apocalyptic Earth',selected:false}, {name:'Nuptia 4',selected:false},{name:'Other Origins',selected:false}]\n      }\n    ]\n    return filter;\n  }\n  getAllChjaracters(page:number,query:string){\n\n    let queryString = query.length > 0 ? (page+query) :page;\n    return this._http.get(environment.url+'character?page='+queryString).pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n  handleError(error) {\n    console.log(error)\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n        // client-side error\n        errorMessage = `Error: ${error.error.message}`;\n    } else {\n        // server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n}\n}\n"]}